plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.1'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.flywaydb.flyway' version '9.22.3'
    id 'jacoco'
    id 'checkstyle'
    id 'com.diffplug.spotless' version '6.25.0'
}

group = 'jp.co.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_21
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-aop'  // AOP 依存関係
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Database
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'
    
    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    
    // OpenAPI Documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    
    // Utility
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'commons-codec:commons-codec:1.15'
    
    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.testcontainers:postgresql:1.18.3'
    testImplementation 'org.testcontainers:junit-jupiter:1.18.3'
}

// プロファイルの取得
def activeProfile = findProperty('spring.profiles.active') ?: 'test'

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    
    // プロファイルに応じたシステムプロパティの設定
    systemProperty 'spring.profiles.active', activeProfile
    
    testLogging {
        events 'passed', 'skipped', 'failed'
        showStandardStreams = true
    }
}

tasks.named('jacocoTestReport') {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
}

// テスト用のFlywayタスク
task flywayMigrateTest(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
    url = 'jdbc:postgresql://localhost:5433/ses_mgr_test'
    user = 'postgres_test'
    password = 'postgres_test'
    locations = ['classpath:db/migration']
    baselineOnMigrate = true
    schemas = ['public', 'common', 'engineer', 'project', 'matching', 'contract', 'timesheet', 'billing', 'reporting', 'audit']
    placeholders = [
        'schemaPrefix': '',
        'tablePrefix': ''
    ]
}

// テスト用のFlywayクリーンタスク
task flywayCleanTest(type: org.flywaydb.gradle.task.FlywayCleanTask) {
    url = 'jdbc:postgresql://localhost:5433/ses_mgr_test'
    user = 'postgres_test'
    password = 'postgres_test'
    cleanDisabled = false // クリーンを有効化
}

checkstyle {
    toolVersion = '10.12.2'
    configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
}

flyway {
    url = 'jdbc:postgresql://localhost:5432/sesapp'
    user = 'postgres'
    password = 'postgres'
    schemas = ['public', 'common', 'engineer', 'project', 'matching', 'contract', 'timesheet', 'billing', 'reporting', 'audit']
}

spotless {
    java {
        importOrder()
        removeUnusedImports()
        googleJavaFormat()
    }
}